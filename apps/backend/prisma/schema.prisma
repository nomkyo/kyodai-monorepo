datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")  
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String
  firstname String?
  lastname  String?
  posts     Post[]
  role      Role
  createdTickets  Ticket[] @relation("createdTickets")
  matchingTickets Ticket[] @relation("matchingTickets")
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean
  title     String
  content   String?
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  
}

model Game {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  startTime DateTime
  homeTeam     Team   @relation("homeGames", fields: [homeTeamId], references: [id])
  awayTeam     Team   @relation("awayGames", fields: [awayTeamId], references: [id])
  homeSpread     Int
  awaySpread     Int
  league    String
  homeTeamId  String
  awayTeamId  String
  tickets   Ticket[]  @relation("tickets")
}
model Team {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  code      String @unique
  name      String
  fullName   String
  awayGames  Game[] @relation("awayGames")
  homeGames  Game[] @relation("homeGames")
}
model Ticket {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creator      User     @relation("createdTickets", fields: [creatorId], references: [id])
  creatorId    String
  matchingUser  User    @relation("matchingTickets", fields: [matchingUserId], references:[id])
  matchingUserId  String
  match     Game     @relation("tickets", fields: [matchId], references: [id])
  matchId   String          
  homeSpread  Int
  awaySpread  Int
  isOpen    Boolean
  amount    Int

}
enum Role {
  ADMIN
  USER
}
